<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Script Interactivo de Intervalos</title>
  <style>
    body { margin: 20px; font-family: sans-serif; }
    #container {
      position: relative;
      width: 800px;
      height: 500px;
      border: 1px solid #ccc;
    }
    canvas {
      background: #fafafa;
    }
    /* Un contenedor exclusivo para la parte interactiva */
    #interfaz {
      position: absolute;
      top: 0;
      left: 0;
      width: 800px;
      height: 500px;
      pointer-events: none; /* Se activan manualmente los eventos sobre el canvas */
    }
    #mathOutput {
      margin-top: 10px;
      font-size: 20px;
    }
  </style>
  <!-- Carga de MathJax -->
  <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
  <script id="MathJax-script" async
      src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
  </script>
</head>
<body>

<div id="mathOutput"></div>

<div id="container">
  <canvas id="canvas" width="800" height="500"></canvas>
</div>

<script>
/*
  Este script implementa:
    1. Un canvas exclusivo para la parte interactiva.
    2. Representación en la recta numérica de dos intervalos:
         • Primer intervalo: [a, b] (inicialmente [-2, 3])
         • Segundo intervalo: [p, q[ (inicialmente [0, 4[)
    3. Los intervalos se dibujan como segmentos gruesos:
         - Azul para el primero.
         - Verde (más grueso y con transparencia) para el segundo.
       Los extremos se dibujan con un disco relleno (si está cerrado) o disco abierto (si está abierto).
    4. Los extremos se pueden arrastrar con el ratón y se activa el cambio de abierto/cerrado con doble click.
    5. Al soltar el ratón tras arrastrar, se calcula y dibuja la UNION de los intervalos, en magenta, sobre la recta.
    6. En la parte superior se imprime (usando MathJax) la notación de los dos intervalos, el símbolo de unión y el intervalo resultado.
    7. Los extremos se imprimen redondeados a dos decimales; si la parte decimal es menor que 0.08 se redondea al extremo más cercano.
*/

// --- Parámetros iniciales y utilidades ---
let canvas = document.getElementById("canvas");
let ctx = canvas.getContext("2d");

const WIDTH = canvas.width;
const HEIGHT = canvas.height;
const MARGIN = 50;  // margen para la recta

// Transformación del mundo real a coordenadas del canvas
// Definimos que el mundo se extienda, por ejemplo, de -10 a 10
const worldMin = -10, worldMax = 10;
function worldToCanvas(x) {
  return MARGIN + ((x - worldMin)/(worldMax - worldMin)) * (WIDTH - 2*MARGIN);
}
function canvasToWorld(x) {
  return worldMin + ((x - MARGIN)/(WIDTH - 2*MARGIN)) * (worldMax - worldMin);
}

// Radio para los discos de los extremos
const RADIUS = 8;

// Datos de los intervalos
let intervalo1 = {
  a: -2,
  b: 3,
  // Estado de extremos: true = cerrado, false = abierto
  aClosed: true,
  bClosed: true,
  color: "blue",
  grosor: 6
};

let intervalo2 = {
  p: 0,
  q: 4,
  pClosed: true,
  qClosed: false,  // [0,4[
  color: "green",
  grosor: 10,
  alpha: 0.6  // transparencia
};

// Unión (se recalcula al soltar el ratón)
let unionIntervalo = null; // se rellenará con {left, right, leftClosed, rightClosed}

// Para el control de arrastre
let dragging = null; // objeto {intervalo, extremo: "a" | "b" o "p" | "q"}
let offsetX = 0;

// --- Funciones de redondeo ---
// Redondea a dos decimales. Si la parte decimal es menor que 0.08, redondea al extremo más cercano.
function redondear(x) {
  let factor = 100;
  let r = Math.round(x * factor) / factor;
  // Si la diferencia entre x y el entero más cercano es menor que 0.08, se ajusta
  let diff = Math.abs(x - Math.round(x));
  if(diff < 0.08) {
    return Math.round(x);
  }
  return r;
}

// --- Cálculo de la Unión ---
// Para la unión usamos el menor extremo y el mayor extremo.
// Se asume que la unión es el conjunto de puntos que están en alguno de los intervalos.
function calcularUnion() {
  // Determinamos el extremo izquierdo:
  let left, leftClosed;
  // Si los dos intervalos tienen el mismo valor mínimo, si alguno es cerrado, se cierra.
  let min1 = intervalo1.a, min2 = intervalo2.p;
  if(min1 < min2) {
    left = min1;
    leftClosed = intervalo1.aClosed;
  } else if(min2 < min1) {
    left = min2;
    leftClosed = intervalo2.pClosed;
  } else {
    left = min1;
    leftClosed = intervalo1.aClosed || intervalo2.pClosed;
  }
  // Determinamos el extremo derecho:
  let right, rightClosed;
  let max1 = intervalo1.b, max2 = intervalo2.q;
  if(max1 > max2) {
    right = max1;
    rightClosed = intervalo1.bClosed;
  } else if(max2 > max1) {
    right = max2;
    rightClosed = intervalo2.qClosed;
  } else {
    right = max1;
    rightClosed = intervalo1.bClosed || intervalo2.qClosed;
  }
  unionIntervalo = {
    left: left,
    right: right,
    leftClosed: leftClosed,
    rightClosed: rightClosed
  };
}

// --- Dibujo ---
function dibujar() {
  // Limpiar canvas
  ctx.clearRect(0, 0, WIDTH, HEIGHT);
  
  // Dibuja la recta numérica (línea horizontal en el centro)
  let yLine = HEIGHT/2;
  ctx.strokeStyle = "black";
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(MARGIN, yLine);
  ctx.lineTo(WIDTH - MARGIN, yLine);
  ctx.stroke();
  
  // Dibuja marcas en la recta (cada 1 unidad)
  ctx.fillStyle = "black";
  for(let i = Math.ceil(worldMin); i <= worldMax; i++){
    let x = worldToCanvas(i);
    ctx.beginPath();
    ctx.moveTo(x, yLine - 5);
    ctx.lineTo(x, yLine + 5);
    ctx.stroke();
    ctx.fillText(i, x-3, yLine + 20);
  }
  
  // Dibuja el primer intervalo (azul)
  dibujarIntervalo(intervalo1.a, intervalo1.b, intervalo1.aClosed, intervalo1.bClosed, intervalo1.color, intervalo1.grosor, yLine);
  
  // Dibuja el segundo intervalo (verde con transparencia)
  ctx.save();
  ctx.globalAlpha = intervalo2.alpha;
  dibujarIntervalo(intervalo2.p, intervalo2.q, intervalo2.pClosed, intervalo2.qClosed, intervalo2.color, intervalo2.grosor, yLine);
  ctx.restore();
  
  // Si existe la unión (se calcula al soltar el ratón) se dibuja encima, en magenta
  if(unionIntervalo) {
    // Se dibuja un poco más arriba de la recta (por ejemplo, yLine - 50)
    dibujarIntervalo(unionIntervalo.left, unionIntervalo.right, unionIntervalo.leftClosed, unionIntervalo.rightClosed, "magenta", 8, yLine - 50);
  }
}

// Función para dibujar un intervalo dado sus extremos y estados de cerradura
function dibujarIntervalo(x1, x2, x1Closed, x2Closed, color, grosor, y) {
  let cx1 = worldToCanvas(x1);
  let cx2 = worldToCanvas(x2);
  ctx.strokeStyle = color;
  ctx.lineWidth = grosor;
  ctx.beginPath();
  ctx.moveTo(cx1, y);
  ctx.lineTo(cx2, y);
  ctx.stroke();
  
  // Dibuja los discos en los extremos
  // Función auxiliar para cada extremo
  function dibujarExtremo(x, cerrado) {
    ctx.beginPath();
    ctx.arc(x, y, RADIUS, 0, 2*Math.PI);
    ctx.strokeStyle = color;
    ctx.lineWidth = 2;
    ctx.stroke();
    if(cerrado) {
      ctx.fillStyle = color;
      ctx.fill();
    }
  }
  
  dibujarExtremo(cx1, x1Closed);
  dibujarExtremo(cx2, x2Closed);
}

// --- Impresión con MathJax ---
function actualizarMathOutput() {
  // Redondeamos los extremos según lo indicado.
  let a = redondear(intervalo1.a);
  let b = redondear(intervalo1.b);
  let p = redondear(intervalo2.p);
  let q = redondear(intervalo2.q);
  let unionStr = "";
  if(unionIntervalo){
    let L = redondear(unionIntervalo.left);
    let R = redondear(unionIntervalo.right);
    let leftBracket = unionIntervalo.leftClosed ? "[" : "[";
    let rightBracket = unionIntervalo.rightClosed ? "]" : "]";
    unionStr = leftBracket + L + "," + R + rightBracket;
  }
  // Construir notación de los intervalos con símbolos según su estado
  let int1 = (intervalo1.aClosed ? "[" : "[") + a + "," + b + (intervalo1.bClosed ? "]" : "]");
  let int2 = (intervalo2.pClosed ? "[" : "[") + p + "," + q + (intervalo2.qClosed ? "]" : "[");
  let unionSimbolo = "\\cup";
  
  let texString = `\\( ${int1} ${unionSimbolo} ${int2} = ${unionStr} \\)`;
  document.getElementById("mathOutput").innerHTML = texString;
  if(window.MathJax){
    MathJax.typesetPromise();
  }
}

// --- Manejo de eventos ---
canvas.addEventListener("mousedown", (e) => {
  const rect = canvas.getBoundingClientRect();
  const mouseX = e.clientX - rect.left;
  const mouseY = e.clientY - rect.top;
  const yLine = HEIGHT/2;
  
  // Revisa si se hizo clic cerca de algún extremo de los intervalos
  function revisarExtremo(xWorld, estado, idIntervalo, extremo) {
    let cx = worldToCanvas(xWorld);
    if(Math.abs(mouseX - cx) < RADIUS+3 && Math.abs(mouseY - yLine) < RADIUS+3) {
      dragging = { id: idIntervalo, extremo: extremo };
      // Calcula offset para arrastre suave (en coordenadas del mundo)
      offsetX = canvasToWorld(mouseX) - xWorld;
    }
  }
  
  revisarExtremo(intervalo1.a, intervalo1.aClosed, "intervalo1", "a");
  revisarExtremo(intervalo1.b, intervalo1.bClosed, "intervalo1", "b");
  revisarExtremo(intervalo2.p, intervalo2.pClosed, "intervalo2", "p");
  revisarExtremo(intervalo2.q, intervalo2.qClosed, "intervalo2", "q");
});

canvas.addEventListener("mousemove", (e) => {
  if(dragging){
    const rect = canvas.getBoundingClientRect();
    const mouseX = e.clientX - rect.left;
    let newVal = canvasToWorld(mouseX) - offsetX;
    // Para asegurar que el extremo arrastrado no invierta el intervalo, comprobamos límites
    if(dragging.id === "intervalo1") {
      if(dragging.extremo === "a"){
        if(newVal < intervalo1.b - 0.1){ // margen mínimo
          intervalo1.a = newVal;
        }
      } else { // extremo "b"
        if(newVal > intervalo1.a + 0.1){
          intervalo1.b = newVal;
        }
      }
    } else if(dragging.id === "intervalo2") {
      if(dragging.extremo === "p"){
        if(newVal < intervalo2.q - 0.1){
          intervalo2.p = newVal;
        }
      } else { // extremo "q"
        if(newVal > intervalo2.p + 0.1){
          intervalo2.q = newVal;
        }
      }
    }
    dibujar();
    actualizarMathOutput();
  }
});

canvas.addEventListener("mouseup", (e) => {
  if(dragging){
    // Al soltar el mouse se calcula y dibuja la unión de los intervalos.
    calcularUnion();
    dragging = null;
    dibujar();
    actualizarMathOutput();
  }
});

// Doble click para cambiar el estado de abierto/cerrado del extremo clicado.
canvas.addEventListener("dblclick", (e) => {
  const rect = canvas.getBoundingClientRect();
  const mouseX = e.clientX - rect.left;
  const mouseY = e.clientY - rect.top;
  const yLine = HEIGHT/2;
  
  // Función auxiliar para detectar clic en un extremo y cambiar su estado.
  function toggleExtremo(xWorld, propiedad, objeto, extremo) {
    let cx = worldToCanvas(xWorld);
    if(Math.abs(mouseX - cx) < RADIUS+3 && Math.abs(mouseY - yLine) < RADIUS+3) {
      objeto[propiedad] = !objeto[propiedad];
    }
  }
  
  toggleExtremo(intervalo1.a, "aClosed", intervalo1, "a");
  toggleExtremo(intervalo1.b, "bClosed", intervalo1, "b");
  toggleExtremo(intervalo2.p, "pClosed", intervalo2, "p");
  toggleExtremo(intervalo2.q, "qClosed", intervalo2, "q");
  
  dibujar();
  actualizarMathOutput();
});

// Actualizamos el dibujo inicial
dibujar();
actualizarMathOutput();
</script>

</body>
</html>
